<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | 雨辰不语]]></title>
  <link href="http://suzhen.github.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://suzhen.github.com/"/>
  <updated>2014-03-06T16:10:03+08:00</updated>
  <id>http://suzhen.github.com/</id>
  <author>
    <name><![CDATA[suzhen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[神奇的HASH]]></title>
    <link href="http://suzhen.github.com/blog/2014/03/06/shen-qi-de-hash/"/>
    <updated>2014-03-06T16:09:00+08:00</updated>
    <id>http://suzhen.github.com/blog/2014/03/06/shen-qi-de-hash</id>
    <content type="html"><![CDATA[<p>hash是我们经常会用到一种数据结构。它有很多特别的有趣的特性是不被发现的。这片文章来总结一下：</p>

<p>  Hash.new 初始化一个HASH对象。</p>

<p>  ah1 = {}     #=>  {}</p>

<p>  ah2 = Hash.new  #=> {}</p>

<p>  以上两种是最基本的初始化方法。</p>

<p>  ah3 = Hash.new("hello")   #=>{}</p>

<p>  ah4 = Hash.new {|hash,key| hash[key] = "hello,#{key}"} #=>{}</p>

<p>  以上两种初始化方法，是给hash对象没有value的key一个默认的value。</p>

<p>  一： ah3["age"] 我们并没有赋值，ah3也没有这个key</p>

<p>  但我们输出 ah3[“age"] 时，会出现 hello  ，无论我们使用什么key,只要没有赋值，输出的都是hello</p>

<p>  二：ah4就更神奇了，输出的默认value，是和我们的key有了关系。比如：</p>

<p>  ah4[“suzhen”] => hello,suzhen</p>

<p>  ah4[“suyuchen”] => hello,suyuchen</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RUBY魔法师(掏心篇)]]></title>
    <link href="http://suzhen.github.com/blog/2014/03/06/rubymo-fa-shi-tao-xin-pian/"/>
    <updated>2014-03-06T16:06:00+08:00</updated>
    <id>http://suzhen.github.com/blog/2014/03/06/rubymo-fa-shi-tao-xin-pian</id>
    <content type="html"><![CDATA[<p>ruby也有一些黑魔法，用的好，可以事半功倍，但是也存在着很大的风险。今天要讲的是打破一层一层的封装，跳过常规的读写方式，直接从object里获取或者设置instanc variable 的方法。</p>

<p>  首先我们可以先了解 实例对象 ，类的实例对象， 类对象 三个概念。</p>

<p>  施展两组黑魔法。</p>

<p>   instance_variable_get 与  instance_variable_set</p>

<p>   直接对一个对象或者类里面，获取和设置某个实例对象。注意在 获取和设置obj的实例对象的时候，要先确保obj的实例对象已经产生了。</p>

<p>  class_variable_get 与 class_variable_set</p>

<p>  直接对一个类，获取和设置类对象。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">class</span> <span class="nc">G</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@@class_variable = 33</span>
</span><span class='line'><span class="sr">@class_instance_variable = 55</span>
</span><span class='line'><span class="sr">def initialize</span>
</span><span class='line'><span class="sr">  @instance_variable_1 ||= 44</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">def build_var2</span>
</span><span class='line'><span class="sr">  @instance_variable_2 = 22</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="n">g</span> <span class="o">=</span> <span class="n">G</span><span class="o">.</span><span class="n">new</span><span class="p">()</span>
</span><span class='line'>  <span class="n">g</span><span class="o">.</span><span class="n">build_var2</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  p  g.instance_variable_get(&quot;@instance_variable_1&quot;) #=&gt; 44</span>
</span><span class='line'><span class="sr">  p G.class_variable_get(:@@class_variable)  #=&gt; 33</span>
</span><span class='line'><span class="sr">  p G.instance_variable_get(:@class_instance_variable)  #=&gt; 55&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>  注意这两组黑魔法的argument可以有种形式，一种是string，一种是sym。string就意味着可以拼接一个参数。</p>

<p>  这两组黑魔法，都是打破了OO的封闭。这样的好处是很直接就可以操作一个对象的核心的变量，如果这些变量并没有提供对外存取的method。但要注意到普通对象的实例变量是惰性的，不会在定义中就生成，只能在运行中产生实例变量。</p>

<p>  那我们想知道运行中对象都产生了哪些实例对象呢?</p>

<p>  p g.instance_variables  #=>[:@instance_variable_1,:@instance_variable_2]</p>

<p>  或者都我们在存取实例对象的时候，先判断一下这个instance variable是否已经生成。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>   <span class="n">g</span> <span class="o">=</span> <span class="n">G</span><span class="o">.</span><span class="n">new</span><span class="p">()</span>
</span><span class='line'>   <span class="nb">p</span> <span class="n">g</span><span class="o">.</span><span class="n">instance_variable_defined?</span><span class="p">(</span><span class="ss">:@instance_variable_1</span><span class="p">)</span> <span class="c1">#=&gt; true</span>
</span><span class='line'>   <span class="nb">p</span> <span class="n">g</span><span class="o">.</span><span class="n">instance_variable_defined?</span><span class="p">(</span><span class="ss">:@instance_variable_2</span><span class="p">)</span> <span class="c1">#=&gt; false</span>
</span><span class='line'>   <span class="n">g</span><span class="o">.</span><span class="n">build_var2</span>
</span><span class='line'>   <span class="nb">p</span> <span class="n">g</span><span class="o">.</span><span class="n">instance_variable_defined?</span><span class="p">(</span><span class="ss">:@instance_variable_2</span><span class="p">)</span> <span class="c1">#=&gt; true&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
   魔法使用场景： 我们发现以上说的黑魔法都是public的,。那么instance_variable_get/set同样可以在类内部使用。但是instance_variable在method之间是可以自由获取和设置的。为什么还会用的到instance_variable_get/set呢?</p>

<p>  看如下的例子：
  <div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">class</span> <span class="nc">Volume</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;ATTRIBUTES = [</span>
</span><span class='line'><span class="sr">  :name, :size, :type, :owner, :date_created, :date_modified,</span>
</span><span class='line'><span class="sr">  :iscsi_target, :iscsi_portal</span>
</span><span class='line'><span class="sr">].freeze</span>
</span><span class='line'>
</span><span class='line'><span class="sr">ATTRIBUTES.each do |attr|</span>
</span><span class='line'><span class="sr">  attr_accessor attr</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">SYSTEM = 0</span>
</span><span class='line'><span class="sr">DATA = 1</span>
</span><span class='line'>
</span><span class='line'><span class="sr">DEFAULTS = {</span>
</span><span class='line'><span class="sr">  :type =&amp;gt; SYSTEM</span>
</span><span class='line'><span class="sr">}.freeze</span>
</span><span class='line'>
</span><span class='line'><span class="sr">def initialize(args = nil)</span>
</span><span class='line'><span class="sr">  # EDIT</span>
</span><span class='line'><span class="sr">  # args = args ? DEFAULTS : DEFAULTS.merge(args) # Original</span>
</span><span class='line'><span class="sr">  args = args ? DEFAULTS.merge(args) : DEFAULTS</span>
</span><span class='line'>
</span><span class='line'><span class="sr">  ATTRIBUTES.each do |attr|</span>
</span><span class='line'><span class="sr">    if (args.key?(attr))</span>
</span><span class='line'><span class="sr">        instance_variable_set(&quot;@</span><span class="si">#{</span><span class="kp">attr</span><span class="si">}</span><span class="sr">&quot;, args[attr])</span>
</span><span class='line'><span class="sr">    ＃instance_variable_set的argument是可以用string拼接的，就有了很大的灵活性。这样也就行成了元编程。否则就要@name = args[:name];@size=args[:size]… 我们也可以用__send__方法来解决。</span>
</span><span class='line'><span class="sr">      # self.__send__ &quot;</span><span class="si">#{</span><span class="kp">attr</span><span class="si">}</span><span class="sr">=&quot;,args[attr]</span>
</span><span class='line'><span class="sr">    end</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">def inspect</span>
</span><span class='line'><span class="sr">  ATTRIBUTES.inject({ }) do |h, attr|</span>
</span><span class='line'><span class="sr">    h[attr] = instance_variable_get(&quot;@</span><span class="si">#{</span><span class="kp">attr</span><span class="si">}</span><span class="sr">&quot;)</span>
</span><span class='line'><span class="sr">    h</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">def to_json</span>
</span><span class='line'><span class="sr">  self.inspect.to_json</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>  在类的内也有针对instance variable的操作。</p>

<p>  移除实例变量的方法：remove_instance_variable 这个方法是private
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">class</span> <span class="nc">Dummy</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;attr_reader :var</span>
</span><span class='line'><span class="sr">def initialize</span>
</span><span class='line'><span class="sr">  @var = 99</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">def remove</span>
</span><span class='line'><span class="sr">  remove_instance_variable(:@var)</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">  d = Dummy.new</span>
</span><span class='line'><span class="sr">  d.var      #=&gt; 99</span>
</span><span class='line'><span class="sr">  d.remove   #=&gt; 99</span>
</span><span class='line'><span class="sr">  d.var      #=&gt; nil</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RUBY动态调用方法]]></title>
    <link href="http://suzhen.github.com/blog/2014/03/06/rubydong-tai-diao-yong-fang-fa/"/>
    <updated>2014-03-06T16:03:00+08:00</updated>
    <id>http://suzhen.github.com/blog/2014/03/06/rubydong-tai-diao-yong-fang-fa</id>
    <content type="html"><![CDATA[<p>有三种方式：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">class</span> <span class="nc">Dummy</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;attr_accessor :host</span>
</span><span class='line'>
</span><span class='line'><span class="sr">def initialize(name)</span>
</span><span class='line'><span class="sr">  @host = name</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="sr">def say(content)</span>
</span><span class='line'><span class="sr">  puts &quot;Hi,</span><span class="si">#{</span><span class="n">host</span><span class="si">}</span><span class="sr">,</span><span class="si">#{</span><span class="n">content</span><span class="si">}</span><span class="sr">&quot;</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
  第一种用send动态调用</p>

<p>  <div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="no">Dummy</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;suzhen&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:say</span><span class="p">,</span><span class="s2">&quot;how are you&quot;</span><span class="p">)</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>  第二种用method来获取某个方法，用call来调用。也算是延迟调用。
  <div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">m</span> <span class="o">=</span> <span class="no">Dummy</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;suzhen&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">method</span><span class="p">(</span><span class="ss">:say</span><span class="p">)</span>
</span><span class='line'>  <span class="n">m</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="s2">&quot;how are you&quot;</span><span class="p">)</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>  第三种用eval来动态调用
  <div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="nb">eval</span> <span class="s2">&quot;Dummy.new(&#39;suzhen&#39;).say(&#39;how are you&#39;)&quot;</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RUBY魔法师（方法高级篇）]]></title>
    <link href="http://suzhen.github.com/blog/2014/02/23/rubymo-fa-shi-%28fang-fa-gao-ji-pian-%29/"/>
    <updated>2014-02-23T11:37:00+08:00</updated>
    <id>http://suzhen.github.com/blog/2014/02/23/rubymo-fa-shi-(fang-fa-gao-ji-pian-)</id>
    <content type="html"><![CDATA[<p>  一、动态创建method和动态调用方法</p>

<p>  问题：什么是动态创建和动态调用方法？
  答：就是代码在运行过程时，才定义的方法。同样，只有在代码运行时，才能开始调用的方法，是动态调用方法，这是一组很有用的魔法。</p>

<p>  魔法师用define_method来动态创建实例方法：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">class</span> <span class="nc">Dummy</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;#动态创建一个实例方法say_hi</span>
</span><span class='line'><span class="sr">define_method :say_hi do | name |</span>
</span><span class='line'><span class="sr">  puts &quot;HI,</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="sr">&quot;</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">#动态创建一个类方法say_hello</span>
</span><span class='line'><span class="sr">class &amp;lt;&amp;lt; self</span>
</span><span class='line'><span class="sr">  define_method :say_hello do | name |</span>
</span><span class='line'><span class="sr">    puts &quot;Hello,</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="sr">&quot;</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="no">Dummy</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">say_hi</span><span class="p">(</span><span class="s2">&quot;suzhen&quot;</span><span class="p">)</span> <span class="c1">#-&gt;  HI,suzhen&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="no">Dummy</span><span class="o">.</span><span class="n">say_hello</span><span class="p">(</span><span class="s2">&quot;suzhen&quot;</span><span class="p">)</span> <span class="c1">#-&gt; Hello,suzhen&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>  创建单例方法：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">obj</span> <span class="o">=</span> <span class="no">Dummy</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="n">obj2</span> <span class="o">=</span> <span class="no">Dummy</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="k">class</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">obj</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;    define_method :say_hi do</span>
</span><span class='line'><span class="sr">      puts &quot;HI&quot;</span>
</span><span class='line'><span class="sr">    end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;   end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>   <span class="n">obj</span><span class="o">.</span><span class="n">say_hi</span> <span class="c1">#-&gt;HI</span>
</span><span class='line'>   <span class="n">obj</span><span class="o">.</span><span class="n">say_hi</span> <span class="c1">#-&gt; mt_ad.rb:30:in &lt;code&gt;&amp;lt;main&amp;gt;&#39;: undefined method&lt;/code&gt;say_hi&#39; for #&amp;lt;Dummy:0x007fce6c109068&gt; (NoMethodError)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>  说明：</p>

<p>  1、define_method是一个private方法</p>

<p>  2、由于define_method是一个private方法，它不能被显式调用。</p>

<p>  3、define_method是Module类的一个instance_method,只能由一个具体的module和一个具体的class来调用。</p>

<pre><code>因为:
</code></pre>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">module</span> <span class="nn">DummyModule</span><span class="p">;</span> <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  class Dummy; end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="nb">p</span> <span class="no">DummyModule</span><span class="o">.</span><span class="n">class</span> <span class="c1">#—&gt;Module&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="nb">p</span> <span class="no">Dummy</span><span class="o">.</span><span class="n">class</span> <span class="c1">#—&gt;Class&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="nb">p</span> <span class="no">Dummy</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">superclass</span> <span class="c1">#—&gt;Module&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>  一个具体的module或者一个具体的class都是Module类的实例。</p>

<p>  4、为当前self(必须是类，不管是普通类还是eigenclass)创建一个instance method,换句话说就是define_method消息的接收者只能是类对象。</p>

<p>  比如：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="no">Dummy</span><span class="o">.</span><span class="n">instance_eval</span> <span class="k">do</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;#当前self是Dummy类本身，所以此处定义的是Dummy的实例方法。</span>
</span><span class='line'><span class="sr">define_method :say_hello do</span>
</span><span class='line'><span class="sr">  puts &quot;hello,suzhen&quot;</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">class</span> <span class="nc">Dummy</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;def self.create_method</span>
</span><span class='line'><span class="sr">  #类方法中的self，代表的也是Dummy类本身，所以此处定义的是Dummy的实例方法。</span>
</span><span class='line'><span class="sr">  define_method :say_hi do </span>
</span><span class='line'><span class="sr">    puts &quot;suzhen&quot;</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="no">Dummy</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">say_hello</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  Dummy.create_method&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="no">Dummy</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">say_hi</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  ————————————————————&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">class</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">Dummy</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;#此处的self是Dummy的eigenclass，所以就是创建eigenclass类的实例方法，也就是Dummy的类方法。</span>
</span><span class='line'><span class="sr">define_method :say_bye do</span>
</span><span class='line'><span class="sr">  puts &quot;bye&quot;</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="no">Dummy</span><span class="o">.</span><span class="n">say_bye</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>  或者：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">class</span> <span class="nc">Dummy</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;def self.create_class_method </span>
</span><span class='line'><span class="sr">  class &amp;lt;&amp;lt; self</span>
</span><span class='line'><span class="sr">     define_method :say_love do</span>
</span><span class='line'><span class="sr">      puts &quot;love&quot;</span>
</span><span class='line'><span class="sr">     end </span>
</span><span class='line'>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="no">Dummy</span><span class="o">.</span><span class="n">create_class_method</span>
</span><span class='line'>  <span class="no">Dummy</span><span class="o">.</span><span class="n">say_love</span> <span class="c1">#—&gt; love&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="err">————————————————————</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  class Dummy&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">define_new_method_by_other_method</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">#注意这里的self代表的是Dummy的实例对象。并不是类对象，所以是没有define_method方法的。</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">define_method</span> <span class="ss">:say_hi</span> <span class="k">do</span> <span class="o">|</span> <span class="nb">name</span> <span class="o">|</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;HI,</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  Dummy.new.define_new_method_by_other_method #报错&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>  综上所述可以看出，我们在使用define_method方法都是在当前类的内部。而作为private方法是不可以在外面调用的，比如：</p>

<p>  Dummy.define_method :say_hi do end # 访问保护</p>

<p>  或者</p>

<p>  obj = Dummy.new</p>

<p>  obj.class.define_method :say_hi do end＃访问保护</p>

<p>  但魔法师当然有他的魔术：send</p>

<p>  send 不仅可以动态调用方法，还可以调用私有方法。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="nb">proc</span> <span class="o">=</span> <span class="nb">lambda</span><span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;suzhen&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="no">Dummy</span><span class="o">.</span><span class="n">send</span> <span class="ss">:define_method</span><span class="p">,</span><span class="ss">:say_hi</span><span class="p">,</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="nb">proc</span>
</span><span class='line'>  <span class="no">Dummy</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">say_hi</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
  或者</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">obj</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">send</span> <span class="ss">:define_method</span><span class="p">,</span><span class="ss">:say_hi</span><span class="p">,</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="nb">proc</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
  给obj的eigenclass动态定义方法</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">obj</span><span class="o">.</span><span class="n">singleton_class</span><span class="o">.</span><span class="n">send</span>  <span class="ss">:define_method</span><span class="p">,</span><span class="ss">:say_hi</span> <span class="k">do</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;puts  &quot;suzhen&quot;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="n">obj</span><span class="o">.</span><span class="n">say_hi</span> <span class="c1">#suzhen&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="n">obj2</span><span class="o">.</span><span class="n">say_hi</span> <span class="c1">#报错</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>  在类的外部动态创建类的类方法</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="no">Dummy</span><span class="o">.</span><span class="n">singleton_class</span><span class="o">.</span><span class="n">send</span>  <span class="ss">:define_method</span><span class="p">,</span><span class="ss">:say_hi</span> <span class="k">do</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;puts  &quot;suzhen&quot;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="no">Dummy</span><span class="o">.</span><span class="n">say_hi</span> <span class="c1">#—&gt; suzhen&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>  我们发现从外面给一个实例对象动态创建方法，或者给一个类动态创建方法，都需要先获取他们的eigenclass，再通过send 动态调用define_method方法，把要动态创建的方法名和block做为参数再传入。</p>

<p>  这样太麻烦了。有没有简单点的方法呢？魔法师给了我们一个魔法：define_singleton_method 它是Object类的一个实例方法。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">obj</span> <span class="o">=</span> <span class="no">Dummy</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="n">obj2</span> <span class="o">=</span> <span class="no">Dummy</span><span class="o">.</span><span class="n">new</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  obj.define_singleton_method :say_hi do&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nb">puts</span> <span class="s2">&quot;suzhen&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  obj.say_hi #-&gt; suzhen&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="n">obj2</span><span class="o">.</span><span class="n">say_hi</span> <span class="c1">#-&gt;报错</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>  或者</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="no">Dummy</span><span class="o">.</span><span class="n">define_singleton_method</span> <span class="ss">:say_hello</span> <span class="k">do</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;  puts &quot;hello&quot;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="no">Dummy</span><span class="o">.</span><span class="n">say_hello</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  define_singleton_method 为我们的工作减少不小的工作量：</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>  1，减少获取eigenclass的过程： (class &lt;&lt; obj ;self; end) ｜ (class &lt;&lt; Dummy ;self; end) 或者obj.singeton_class | Dummy.singenton_class</p>

<p>  2，减少了eigenclass使用send动态调用define_method的过程:   (eigenClass).send :define_method,agru,&amp;block</p>

<p>  下一个要考虑的问题就是：</p>

<p>  设置动态创建的method的权限。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">obj</span><span class="o">.</span><span class="n">singleton_class</span><span class="o">.</span><span class="n">class_eval</span> <span class="k">do</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;  private  :say_hi </span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">  或者：</span>
</span><span class='line'><span class="sr">  obj.singleton_class.send :private,:say_hi&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="n">obj</span><span class="o">.</span><span class="n">say_hi</span> <span class="err">＃报错</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  Dummy.singleton_class.class_eval do&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="kp">private</span> <span class="ss">:say_hello</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  Dummy.say_hello #报错</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>  我们来复习一下上面的内容发现：defind_methd 可以在一个普通类里动态定义方法，也可以在eigenClass里动态定义方法。可以在一个类内部动态定义方法，也可以在一个类外部通过send进行动态方法的定义。</p>

<p>  以上说的是method的动态定义，动态执行。  那么根据增删查改的模式，我还要了解 “删”，“查”，“改”（重载或者）</p>

<p>  那么如何删除一个方法？</p>

<p> <div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>  <span class="n">undef_method</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  remove_method  相应的callback method_removed&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">class</span> <span class="nc">Parent</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;  def hello</span>
</span><span class='line'><span class="sr">    puts &quot;In parent&quot;</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">  class Child &amp;lt; Parent&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">hello</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;In child&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  c = Child.new</span>
</span><span class='line'><span class="sr">  c.hello&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">class</span> <span class="nc">Child</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt; remove_method :hello  # remove from child, still in parent</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">  c.hello&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">class</span> <span class="nc">Child</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;  undef_method :hello   # prevent any calls to &#39;hello&#39;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">  c.hello&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="no">In</span> <span class="n">child</span>
</span><span class='line'>  <span class="no">In</span> <span class="n">parent</span>
</span><span class='line'>  <span class="n">prog</span><span class="o">.</span><span class="n">rb</span><span class="p">:</span><span class="mi">23</span><span class="p">:</span> <span class="n">undefined</span> <span class="nb">method</span> <span class="sb">`hello&#39; for #&amp;lt;Child:0x401b3bb4&gt; (NoMethodError)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
  undef_method与remove_method的用法与define_method是一样的。区别在于，remove_method 只是移除了本类中的方法，但父类的方法还在。对象还是可以调用该方法的。但undef_method就彻底把方法从家族中移除了。</p>

<p>  如何查看有哪些方法呢？</p>

<p>  methods;
  instance_methods;
  private_instance_methods;protected_instance_methods;public_instance_methods;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby之类对象]]></title>
    <link href="http://suzhen.github.com/blog/2014/02/23/rubyzhi-lei-dui-xiang/"/>
    <updated>2014-02-23T11:26:00+08:00</updated>
    <id>http://suzhen.github.com/blog/2014/02/23/rubyzhi-lei-dui-xiang</id>
    <content type="html"><![CDATA[<p>先熟悉一下类对象。</p>

<p>  它有点像是作用在整个类继承层次的 全局变量, 它的行为像是没有命名空间的全局常量, 在 一个类及其所有子类中 总是唯一的. 既然他属于 类和它的子孙 公用的那一部分, 那也必然应该属于类了, @@类变量是私有的, 只能在类定义内部隐式的访问它.</p>

<p>  @@对象不仅被类族中类方法访问，也可以被类族中的实例对象访问到。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">class</span> <span class="nc">Dummy</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@@name = &quot;suzhen&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">def self.name</span>
</span><span class='line'><span class="sr">  @@name</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">def name</span>
</span><span class='line'><span class="sr">  @@name</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="nb">p</span> <span class="no">Dummy</span><span class="o">.</span><span class="n">name</span>    <span class="c1"># suzhen</span>
</span><span class='line'>  <span class="nb">p</span> <span class="no">Dummy</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">name</span>  <span class="c1">#suzhen</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>  active_support中对这种类对象有很好的封装。看下面代码：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="nb">require</span> <span class="s2">&quot;active_support/all&quot;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  class Dummy&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">mattr_accessor</span> <span class="ss">:name</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  Dummy.name = &quot;suzhen&quot;&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="nb">p</span> <span class="no">Dummy</span><span class="o">.</span><span class="n">name</span> <span class="c1">#suzhen</span>
</span><span class='line'>  <span class="nb">p</span> <span class="no">Dummy</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">name</span>  <span class="c1">#suzhen&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>  mattr_accessor 就是帮我们创建了一组类方法和一组实例方法</p>

<p>  有的时候，我们只想给出类方法的访问，而不想给出实例方法的访问。</p>

<p>  mattr_accessor :name,:instance_accessor=>false</p>

<p>  至于mattr_accessor 是如何实现的，可以看rails的代码。</p>

<p>  https://github.com/rails/rails/blob/master/activesupport/lib/active_support/core_ext/module/attribute_accessors.rb</p>

<p>  mattr_accessor 与 cattr_accessor 是一样的。</p>

<p>  我们看下面的例子：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">SomeModule</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@@logger = &quot;suzhen&quot;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">class</span> <span class="nc">Dummy</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;include SomeModule</span>
</span><span class='line'>
</span><span class='line'><span class="sr">def self.say</span>
</span><span class='line'><span class="sr">  @@logger</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">def say</span>
</span><span class='line'><span class="sr">  @@logger</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="nb">p</span> <span class="no">Dummy</span><span class="o">.</span><span class="n">say</span>   <span class="err">＃</span><span class="n">suzhen</span>
</span><span class='line'>  <span class="nb">p</span> <span class="no">Dummy</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">say</span> <span class="c1">#suzhen</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>  当一个class引入一个module就是这个class就继承了这个module,那么module中定义的类变量，就可以在这上类家庭中使用了。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">module</span> <span class="nn">SomeModule</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;mattr_accessor :logger</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">class</span> <span class="nc">Dummy</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;include SomeModule</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="nb">p</span> <span class="no">Dummy</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">logger</span>  <span class="err">＃</span><span class="n">suzhen</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  p Dummy.logger  #error</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>  但是上面这个例子中，mattr_accessor 把类方法 self.logger 和self.logger=定义在了module中，include自然不会引用这种类方法。但实例方法是可以用的。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">module</span> <span class="nn">SomeMoudle</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;def self.included(base)</span>
</span><span class='line'><span class="sr">  base.class_eval do</span>
</span><span class='line'><span class="sr">    mattr_accessor :logger</span>
</span><span class='line'><span class="sr">    self.logger = &quot;suzhen&quot;   #初始化的时候一定把self加上。显示的调用。</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>  用以上这种方法自然可以解决这个问题。</p>
]]></content>
  </entry>
  
</feed>
